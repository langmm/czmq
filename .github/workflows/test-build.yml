name: Test of czmq 4.2.1

on:
  push:
    branches-ignore:
      - 'gh-pages'
env:
  CONFIGURATION: Debug
  CMAKE_GENERATOR: Unix Makefiles
  CMAKE_PREFIX: ''
  CMAKE_FLAGS: ''

jobs:
  test_conda:
    name: Using conda dependencies (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      CONDA_PKGS_ALL: 'cmake pcre zeromq'
      CONDA_PKGS_UNIX: 'autoconf automake libtool libuuid pkg-config'
      CONDA_PKGS_OSX: 'clang_osx-64 clangxx_osx-64'
      CONDA_PKGS_WIN: 'c-compiler cxx-compiler ninja'
    strategy:
      max-parallel: 20
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        install-method: [conda, manager, github]
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - name: Apply patch to cmake
      run: |
        git apply 0001-cmake-libzmq-to-zeromq.patch

    # Steps when installing via conda
    - name: Set up miniconda
      if: matrix.install-method == 'conda'
      uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge
    - name: Install dependencies using conda (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_WIN }}
    - name: Install dependencies using conda (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_UNIX }} ${{ env.CONDA_PKGS_OSX }}
    - name: Install dependencies using conda (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_UNIX }}
    - name: List conda packages
      if: matrix.install-method == 'conda'
      run: conda list
    - name: Set prefix for conda package
      if: matrix.install-method == 'conda'
      run: echo "CONDA_PREFIX=$CONDA_PREFIX/lib" >> $GITHUB_ENV
    # - name: Set environment variable pointing to the conda library directory (OSX)
    #   if: matrix.os == 'macos-latest'
    #   run: echo "LDFLAGS=\"-Wl,-rpath,$CONDA_PREFIX/lib $LDFLAGS\"" >> $GITHUB_ENV

    # Steps when installing deps via package manager or github
    - name: Install dependencies using homebrew (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method != 'conda'
      run: |
        brew update
        brew install git libtool pkg-config autoconf automake cmake ossp-uuid pcre
    - name: Install dependencies using apt-get (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method != 'conda'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libtool pkg-config autotools-dev autoconf automake cmake uuid-dev libpcre3-dev
    - name: Set up MSVC Compiler (WINDOWS)
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method != 'conda'
    - name: Install dependencies using choco & vcpkg (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method != 'conda'
      run: |
        choco install cmake
        vcpkg install pcre --triplet x64-windows
        echo "CONDA_FLAGS=$CONDA_FLAGS -DCMAKE_TOOLCHAIN_FILE=D:\\src\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake" >> $GITHUB_ENV

    # Steps when installing libzmq via package manager
    - name: Install libzmq using homebrew (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'manager'
      run: brew install zmq
    - name: Install libzmq using apt-get (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'manager'
      run: sudo apt-get install libzmq3-dev
    - name: Install libzmq using choco & vcpkg (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'manager'
      run: vcpkg install zeromq --triplet x64-windows

    # Steps when installing libzmq via github
    - name: Clone zeromq master branch
      if: matrix.install-method == 'github'
      run: |
        cd ..
        git clone git://github.com/zeromq/libzmq.git
    - name: Set prefix for Github package
      if: matrix.install-method == 'github'
      run: echo "CONDA_PREFIX=C:/libzmq" >> $GITHUB_ENV
    - name: Build and install zeromq master branch (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        mkdir build
        cd build
        cmake .. -DBUILD_STATIC=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=$CONDA_PREFIX
        cmake --build . --config ${{ env.CONFIGURATION }} --target install
        cd ../..
    - name: Build and install zeromq master branch (OSX/LINUX)
      if: matrix.os != 'windows-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        ./autogen.sh
        ./configure
        sudo make install
        cd ..
    - name: Run ldconfig (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        sudo ldconfig
        cd ..

    - name; Set the cmake flags
      if: env.CONDA_PREFIX != ''
      run: echo "CONDA_FLAGS=$CONDA_FLAGS -DCMAKE_PREFIX_PATH=$CONDA_PREFIX" >> $GITHUB_ENV
    - name: Build the CZMQ package (OSX/LINUX)
      if: matrix.os != 'windows-latest'
      run: |
        ./autogen.sh
        ./configure
    - name: Set the Makefile generator to Ninja (WINDOWS)
      if: matrix.os == 'windows-latest'
      run: echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV
    - name: Build the CZMQ package (WINDOWS)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -G${{ env.CMAKE_GENERATOR }} -DCZMQ_BUILD_SHARED=ON -DCZMQ_BUILD_STATIC=OFF $CONDA_FLAGS
        cmake --build . --config ${{ env.CONFIGURATION }}
        ninja all
    - name: Run the tests (OSX/LINUX)
      if: matrix.os != 'windows-latest'
      run: |
        make check-verbose
    - name: Run the tests (WINDOWS)
      if: matrix.os == 'windows-latest'
      run: |
        cd build/${{ env.CONFIGURATION }}
        ./czmq_selftest.exe
    # - name: Start SSH session
    #   uses: luchihoratiu/debug-via-ssh@main
    #   if: ${{ failure() }}
    #   with:
    #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    #     SSH_PASS: ${{ secrets.SSH_PASS }}

  # test_pkg:
  #   name: Using dependencies from package managers (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     max-parallel: 20
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Apply patch to cmake
  #     run: |
  #       git apply 0001-cmake-libzmq-to-zeromq.patch
  #   - name: Install dependencies using homebrew (OSX)
  #     if: matrix.os == 'macos-latest'
  #     run: |
  #       brew update
  #       brew install git libtool pkg-config autoconf automake cmake ossp-uuid pcre zmq
  #   - name: Install dependencies using apt-get (LINUX)
  #     if: matrix.os == 'ubuntu-latest'
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y build-essential libtool pkg-config autotools-dev autoconf automake cmake uuid-dev libpcre3-dev libzmq3-dev
  #   - name: Set up MSVC Compiler (WINDOWS)
  #     uses: ilammy/msvc-dev-cmd@v1
  #     if: matrix.os == 'windows-latest'
  #   - name: Install dependencies using choco & vcpkg (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       choco install cmake
  #       vcpkg install zeromq pcre --triplet x64-windows
  #   - name: Build the CZMQ package (OSX/LINUX)
  #     if: matrix.os != 'windows-latest'
  #     run: |
  #       ./autogen.sh
  #       ./configure
  #   - name: Build the CZMQ package (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       mkdir build
  #       cd build
  #       cmake .. -DCZMQ_BUILD_SHARED=ON -DCZMQ_BUILD_STATIC=OFF
  #       cmake --build . --config ${{ env.CONFIGURATION }}
  #   - name: Run the tests (OSX/LINUX)
  #     if: matrix.os != 'windows-latest'
  #     run: |
  #       make check-verbose
  #   - name: Run the tests (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       cd build/${{ env.CONFIGURATION }}
  #       ./czmq_selftest.exe
  #   # - name: Start SSH session
  #   #   uses: luchihoratiu/debug-via-ssh@main
  #   #   if: ${{ failure() }}
  #   #   with:
  #   #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  #   #     SSH_PASS: ${{ secrets.SSH_PASS }}

  # test_git:
  #   name: Using Github master version of zeromq (${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     max-parallel: 20
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Install dependencies using homebrew (OSX)
  #     if: matrix.os == 'macos-latest'
  #     run: |
  #       brew update
  #       brew install git libtool pkg-config autoconf automake cmake ossp-uuid pcre
  #   - name: Install dependencies using apt-get (LINUX)
  #     if: matrix.os == 'ubuntu-latest'
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y build-essential libtool pkg-config autotools-dev autoconf automake cmake uuid-dev libpcre3-dev
  #   - name: Set up MSVC Compiler (WINDOWS)
  #     uses: ilammy/msvc-dev-cmd@v1
  #     if: matrix.os == 'windows-latest'
  #   - name: Install dependencies using choco & vcpkg (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       choco install cmake
  #       vcpkg install pcre --triplet x64-windows
  #   - name: Clone zeromq master branch
  #     run: |
  #       cd ..
  #       git clone git://github.com/zeromq/libzmq.git
  #   - name: Build and install zeromq master branch (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       cd ../libzmq
  #       mkdir build
  #       cd build
  #       cmake .. -DBUILD_STATIC=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=C:\\libzmq
  #       cmake --build . --config ${{ env.CONFIGURATION }} --target install
  #       cd ../..
  #   - name: Build and install zeromq master branch (OSX/LINUX)
  #     if: matrix.os != 'windows-latest'
  #     run: |
  #       cd ../libzmq
  #       ./autogen.sh
  #       ./configure
  #       sudo make install
  #       cd ..
  #   - name: Run ldconfig (LINUX)
  #     if: matrix.os == 'ubuntu-latest'
  #     run: |
  #       cd ../libzmq
  #       sudo ldconfig
  #       cd ..
  #   - name: Build the CZMQ package (OSX/LINUX)
  #     if: matrix.os != 'windows-latest'
  #     run: |
  #       ./autogen.sh
  #       ./configure
  #   - name: Build the CZMQ package (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       mkdir build
  #       cd build
  #       cmake .. -DCZMQ_BUILD_SHARED=ON -DCZMQ_BUILD_STATIC=OFF -DCMAKE_PREFIX_PATH=C:\\libzmq
  #       cmake --build . --config ${{ env.CONFIGURATION }}
  #   - name: Run the tests (OSX/LINUX)
  #     if: matrix.os != 'windows-latest'
  #     run: |
  #       make check-verbose
  #   - name: Run the tests (WINDOWS)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       cd build/${{ env.CONFIGURATION }}
  #       ./czmq_selftest.exe
  #   # - name: Start SSH session
  #   #   uses: luchihoratiu/debug-via-ssh@main
  #   #   if: ${{ failure() }}
  #   #   with:
  #   #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  #   #     SSH_PASS: ${{ secrets.SSH_PASS }}
