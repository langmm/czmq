name: Test of czmq 4.2.1

on:
  push:
    branches-ignore:
      - 'gh-pages'
env:
  CONFIGURATION: Debug
  CMAKE_ZMQ_PREFIX: ''
  CMAKE_CZMQ_PREFIX: ''
  CMAKE_FLAGS: ''

jobs:
  test_build:
    name: Using ${{ matrix.install-method }} dependencies (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      CONDA_PKGS_ALL: 'pcre zeromq'
      CONDA_PKGS_UNIX: 'autoconf automake libtool libuuid pkg-config cmake'
      CONDA_PKGS_OSX: 'clang_osx-64 clangxx_osx-64'
      CONDA_PKGS_WIN: 'c-compiler cxx-compiler'
    strategy:
      max-parallel: 20
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        install-method: [conda, manager, github]
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - name: Apply patch to cmake
      if: matrix.install-method != 'manager'
      run: |
        # git apply 0001-cmake-libzmq-to-zeromq.patch
        git apply 0001-cmake-libzmq-to-zeromq-vcpkg.patch
    - name: Apply patch to cmake
      if: matrix.install-method == 'manager'
      run: |
        git apply 0001-cmake-libzmq-to-zeromq-vcpkg.patch

    # Steps when installing via conda
    - name: Set up miniconda
      if: matrix.install-method == 'conda'
      uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge
    - name: Install dependencies using conda (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_WIN }}
    - name: Install dependencies using conda (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_UNIX }} ${{ env.CONDA_PKGS_OSX }}
    - name: Install dependencies using conda (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'conda'
      run: conda install ${{ env.CONDA_PKGS_ALL }} ${{ env.CONDA_PKGS_UNIX }}
    - name: List conda packages
      if: matrix.install-method == 'conda'
      run: conda list
    - name: Set prefix for conda package
      if: matrix.install-method == 'conda'
      run: |
        echo "CMAKE_ZMQ_PREFIX=$CONDA_PREFIX" >> $GITHUB_ENV
        echo "CMAKE_CZMQ_PREFIX=$CONDA_PREFIX" >> $GITHUB_ENV
    # - name: Set environment variable pointing to the conda library directory (OSX)
    #   if: matrix.os == 'macos-latest'
    #   run: echo "LDFLAGS=\"-Wl,-rpath,$CONDA_PREFIX/lib $LDFLAGS\"" >> $GITHUB_ENV

    # Steps when installing deps via package manager or github
    - name: Install dependencies using homebrew (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method != 'conda'
      run: |
        brew update
        brew install git libtool pkg-config autoconf automake cmake ossp-uuid pcre
    - name: Install dependencies using apt-get (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method != 'conda'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libtool pkg-config autotools-dev autoconf automake cmake uuid-dev libpcre3-dev
    - name: Set up MSVC Compiler (WINDOWS)
      uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest' && matrix.install-method != 'conda'
    - name: Install dependencies using choco & vcpkg (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method != 'conda'
      run: |
        vcpkg install pcre --triplet x64-windows
        echo "CMAKE_FLAGS=$CMAKE_FLAGS -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    # Steps when installing libzmq via package manager
    - name: Install libzmq using homebrew (OSX)
      if: matrix.os == 'macos-latest' && matrix.install-method == 'manager'
      run: brew install zmq
    - name: Install libzmq using apt-get (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'manager'
      run: sudo apt-get install libzmq3-dev
    - name: Install libzmq using choco & vcpkg (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'manager'
      run: vcpkg install zeromq --triplet x64-windows

    # Steps when installing libzmq via github
    - name: Clone zeromq master branch
      if: matrix.install-method == 'github'
      run: |
        cd ..
        git clone git://github.com/zeromq/libzmq.git
    - name: Set prefix for Github package
      if: matrix.os == 'windows-latest' && matrix.install-method == 'github'
      run: |
        echo "CMAKE_ZMQ_PREFIX=C:/libzmq" >> $GITHUB_ENV
        echo "CMAKE_CZMQ_PREFIX=C:/czmq" >> $GITHUB_ENV
    - name: Build and install zeromq master branch (WINDOWS)
      if: matrix.os == 'windows-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        mkdir build
        cd build
        cmake .. -DBUILD_STATIC=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=$CMAKE_ZMQ_PREFIX
        cmake --build . --config ${{ env.CONFIGURATION }} --target install
        cd ../..
    - name: Build and install zeromq master branch (OSX/LINUX)
      if: matrix.os != 'windows-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        ./autogen.sh
        ./configure
        sudo make install
        cd ..
    - name: Run ldconfig (LINUX)
      if: matrix.os == 'ubuntu-latest' && matrix.install-method == 'github'
      run: |
        cd ../libzmq
        sudo ldconfig
        cd ..

    - name: Set the cmake flags
      if: env.CMAKE_ZMQ_PREFIX != ''
      run: echo "CMAKE_FLAGS=$CMAKE_FLAGS -DCMAKE_PREFIX_PATH=$CMAKE_ZMQ_PREFIX" >> $GITHUB_ENV
    - name: Set the cmake flags
      if: env.CMAKE_CZMQ_PREFIX != ''
      run: echo "CMAKE_FLAGS=$CMAKE_FLAGS -DCMAKE_INSTALL_PREFIX=$CMAKE_CZMQ_PREFIX" >> $GITHUB_ENV
    - name: Build the CZMQ package (OSX/LINUX)
      if: matrix.os != 'windows-latest'
      run: |
        ./autogen.sh
        ./configure
    - name: Copy the ZeroMQ dll to standard location
      if: matrix.os == 'windows-latest' && env.CMAKE_ZMQ_PREFIX != ''
      shell: cmd /C CALL {0}
      run: |
        copy /y ${{ env.CMAKE_ZMQ_PREFIX }}\bin\libzmq-*.dll /b ${{ env.CMAKE_ZMQ_PREFIX }}\bin\libzmq.dll
    - name: Build the CZMQ package (WINDOWS)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake .. -DCZMQ_BUILD_SHARED=ON -DCZMQ_BUILD_STATIC=OFF $CMAKE_FLAGS -A "x64"
        cmake --build . --config ${{ env.CONFIGURATION }} --target install
    - name: Run the tests (OSX/LINUX)
      if: matrix.os != 'windows-latest'
      run: |
        make check-verbose
    - name: Add the zmq library to the path
      if: env.CMAKE_ZMQ_PREFIX != '' && matrix.os == 'windows-latest'
      run: echo "${{ env.CMAKE_ZMQ_PREFIX }}/bin" >> $GITHUB_PATH
      # run: echo "PATH=$PATH:$CMAKE_ZMQ_PREFIX/bin" >> $GITHUB_ENV
    - name: Add the czmq library to the path
      if: env.CMAKE_CZMQ_PREFIX != '' && matrix.os == 'windows-latest'
      run: echo "${{ env.CMAKE_CZMQ_PREFIX }}/bin" >> $GITHUB_PATH
      # run: echo "PATH=$PATH:$CMAKE_CZMQ_PREFIX/bin" >> $GITHUB_ENV
    - name: Run dumpbin
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: |
        cd build
        dumpbin.exe /DEPENDENTS ${{ env.CONFIGURATION }}/czmq_selftest.exe
        where libczmq.dll
        where VCRUNTIME140D.dll
        where ucrtbased.dll
        where KERNEL32.dll
        cd ..
    - name: Run the tests (WINDOWS)
      if: matrix.os == 'windows-latest'
      shell: cmd /C CALL {0}
      run: |
        cd build
        ctest -C ${{ env.CONFIGURATION }} -V
    # - name: Start SSH session
    #   uses: luchihoratiu/debug-via-ssh@main
    #   if: ${{ failure() }}
    #   with:
    #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    #     SSH_PASS: ${{ secrets.SSH_PASS }}
